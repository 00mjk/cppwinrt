// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_base_0_H
#define WINRT_test_component_base_0_H
WINRT_EXPORT namespace winrt::test_component_base
{
    struct IHierarchyA;
    struct IHierarchyAFactory;
    struct IHierarchyB;
    struct IHierarchyBFactory;
    struct HierarchyA;
    struct HierarchyB;
}
namespace winrt::impl
{
    template <> struct category<test_component_base::IHierarchyA>{ using type = interface_category; };
    template <> struct category<test_component_base::IHierarchyAFactory>{ using type = interface_category; };
    template <> struct category<test_component_base::IHierarchyB>{ using type = interface_category; };
    template <> struct category<test_component_base::IHierarchyBFactory>{ using type = interface_category; };
    template <> struct category<test_component_base::HierarchyA>{ using type = class_category; };
    template <> struct category<test_component_base::HierarchyB>{ using type = class_category; };
    template <> inline constexpr auto& name_v<test_component_base::HierarchyA>{ L"test_component_base.HierarchyA" };
    template <> inline constexpr auto& name_v<test_component_base::HierarchyB>{ L"test_component_base.HierarchyB" };
#ifndef WINRT_LEAN_AND_MEAN
    template <> inline constexpr auto& name_v<test_component_base::IHierarchyA>{ L"test_component_base.IHierarchyA" };
    template <> inline constexpr auto& name_v<test_component_base::IHierarchyAFactory>{ L"test_component_base.IHierarchyAFactory" };
    template <> inline constexpr auto& name_v<test_component_base::IHierarchyB>{ L"test_component_base.IHierarchyB" };
    template <> inline constexpr auto& name_v<test_component_base::IHierarchyBFactory>{ L"test_component_base.IHierarchyBFactory" };
#endif
    template <> inline constexpr guid guid_v<test_component_base::IHierarchyA>{ 0x34F5632D,0xFC84,0x5292,{ 0x9D,0xF5,0x4F,0x94,0xE2,0xF6,0x7E,0xA8 } };
    template <> inline constexpr guid guid_v<test_component_base::IHierarchyAFactory>{ 0x90FF3910,0x958A,0x51EA,{ 0x82,0x15,0xEB,0x78,0xFC,0x72,0x03,0x75 } };
    template <> inline constexpr guid guid_v<test_component_base::IHierarchyB>{ 0x62810A66,0x02E7,0x547F,{ 0x8C,0xD9,0xD1,0x1B,0x4C,0xC9,0xF3,0xA8 } };
    template <> inline constexpr guid guid_v<test_component_base::IHierarchyBFactory>{ 0x7BCA54C6,0x3B7A,0x58C6,{ 0xA9,0x64,0x18,0x14,0xA5,0x72,0xEB,0x74 } };
    template <> struct default_interface<test_component_base::HierarchyA>{ using type = test_component_base::IHierarchyA; };
    template <> struct default_interface<test_component_base::HierarchyB>{ using type = test_component_base::IHierarchyB; };
    template <> struct abi<test_component_base::IHierarchyA>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall HierarchyA_Method() noexcept = 0;
        };
    };
    template <> struct abi<test_component_base::IHierarchyAFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <> struct abi<test_component_base::IHierarchyB>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall HierarchyB_Method() noexcept = 0;
        };
    };
    template <> struct abi<test_component_base::IHierarchyBFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(void*, void**, void**) noexcept = 0;
            virtual int32_t __stdcall CreateInstance2(void*, void*, void**, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_test_component_base_IHierarchyA
    {
        auto HierarchyA_Method() const;
    };
    template <> struct consume<test_component_base::IHierarchyA>
    {
        template <typename D> using type = consume_test_component_base_IHierarchyA<D>;
    };
    template <typename D>
    struct consume_test_component_base_IHierarchyAFactory
    {
        auto CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(param::hstring const& name, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<test_component_base::IHierarchyAFactory>
    {
        template <typename D> using type = consume_test_component_base_IHierarchyAFactory<D>;
    };
    template <typename D>
    struct consume_test_component_base_IHierarchyB
    {
        auto HierarchyB_Method() const;
    };
    template <> struct consume<test_component_base::IHierarchyB>
    {
        template <typename D> using type = consume_test_component_base_IHierarchyB<D>;
    };
    template <typename D>
    struct consume_test_component_base_IHierarchyBFactory
    {
        auto CreateInstance(Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
        auto CreateInstance2(param::hstring const& name, Windows::Foundation::IInspectable const& baseInterface, Windows::Foundation::IInspectable& innerInterface) const;
    };
    template <> struct consume<test_component_base::IHierarchyBFactory>
    {
        template <typename D> using type = consume_test_component_base_IHierarchyBFactory<D>;
    };
}
#endif
