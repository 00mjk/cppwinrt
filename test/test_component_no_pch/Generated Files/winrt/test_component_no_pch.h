// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_no_pch_H
#define WINRT_test_component_no_pch_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.3.4.5"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/test_component_no_pch.2.h"
namespace winrt::impl
{
    template <typename D> auto consume_test_component_no_pch_IClass<D>::Method() const
    {
        check_hresult(WINRT_IMPL_SHIM(test_component_no_pch::IClass)->Method());
    }
    template <typename D>
    struct produce<D, test_component_no_pch::IClass> : produce_base<D, test_component_no_pch::IClass>
    {
        int32_t __stdcall Method() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Method();
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::test_component_no_pch
{
    inline Class::Class() :
        Class(impl::call_factory_cast<Class(*)(Windows::Foundation::IActivationFactory const&), Class>([](Windows::Foundation::IActivationFactory const& f) { return f.template ActivateInstance<Class>(); }))
    {
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::test_component_no_pch::IClass> : winrt::impl::hash_base {};
    template<> struct hash<winrt::test_component_no_pch::Class> : winrt::impl::hash_base {};
#endif
}
#endif
