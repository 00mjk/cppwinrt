// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_no_pch_Peer1_H
#define WINRT_test_component_no_pch_Peer1_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.3.4.5"), "Mismatched C++/WinRT headers.");
#include "winrt/test_component_no_pch.h"
#include "winrt/impl/test_component_no_pch.Peer2.2.h"
#include "winrt/impl/test_component_no_pch.Peer1.2.h"
namespace winrt::impl
{
    template <typename H> struct delegate<test_component_no_pch::Peer1::Delegate, H> final : implements_delegate<test_component_no_pch::Peer1::Delegate, H>
    {
        delegate(H&& handler) : implements_delegate<test_component_no_pch::Peer1::Delegate, H>(std::forward<H>(handler)) {}

        int32_t __stdcall Invoke(struct struct_test_component_no_pch_Peer2_B value) noexcept final try
        {
            (*this)(*reinterpret_cast<test_component_no_pch::Peer2::B const*>(&value));
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::test_component_no_pch::Peer1
{
    template <typename L> Delegate::Delegate(L handler) :
        Delegate(impl::make_delegate<Delegate>(std::forward<L>(handler)))
    {
    }
    template <typename F> Delegate::Delegate(F* handler) :
        Delegate([=](auto&&... args) { return handler(args...); })
    {
    }
    template <typename O, typename M> Delegate::Delegate(O* object, M method) :
        Delegate([=](auto&&... args) { return ((*object).*(method))(args...); })
    {
    }
    template <typename O, typename M> Delegate::Delegate(com_ptr<O>&& object, M method) :
        Delegate([o = std::move(object), method](auto&&... args) { return ((*o).*(method))(args...); })
    {
    }
    template <typename O, typename M> Delegate::Delegate(weak_ref<O>&& object, M method) :
        Delegate([o = std::move(object), method](auto&&... args) { if (auto s = o.get()) { ((*s).*(method))(args...); } })
    {
    }
    inline auto Delegate::operator()(test_component_no_pch::Peer2::B const& value) const
    {
        check_hresult((*(impl::abi_t<Delegate>**)this)->Invoke(impl::bind_in(value)));
    }
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
#endif
}
#endif
