// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_no_pch_Peer1_0_H
#define WINRT_test_component_no_pch_Peer1_0_H
WINRT_EXPORT namespace winrt::test_component_no_pch::Peer2
{
    struct B;
}
WINRT_EXPORT namespace winrt::test_component_no_pch::Peer1
{
    struct A;
    struct B;
    struct Delegate;
}
namespace winrt::impl
{
    template <> struct category<test_component_no_pch::Peer1::A>{ using type = struct_category<int32_t>; };
    template <> struct category<test_component_no_pch::Peer1::B>{ using type = struct_category<test_component_no_pch::Peer1::A, int32_t>; };
    template <> struct category<test_component_no_pch::Peer1::Delegate>{ using type = delegate_category; };
    template <> inline constexpr auto& name_v<test_component_no_pch::Peer1::A>{ L"test_component_no_pch.Peer1.A" };
    template <> inline constexpr auto& name_v<test_component_no_pch::Peer1::B>{ L"test_component_no_pch.Peer1.B" };
#ifndef WINRT_LEAN_AND_MEAN
    template <> inline constexpr auto& name_v<test_component_no_pch::Peer1::Delegate>{ L"test_component_no_pch.Peer1.Delegate" };
#endif
    template <> inline constexpr guid guid_v<test_component_no_pch::Peer1::Delegate>{ 0xEC662624,0xBE80,0x550D,{ 0xBE,0xD9,0x2A,0xDD,0xE5,0x07,0x9A,0x81 } };
    template <> struct abi<test_component_no_pch::Peer1::Delegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(struct struct_test_component_no_pch_Peer2_B) noexcept = 0;
        };
    };
    struct struct_test_component_no_pch_Peer1_A
    {
        int32_t Value;
    };
    template <> struct abi<test_component_no_pch::Peer1::A>
    {
        using type = struct_test_component_no_pch_Peer1_A;
    };
    struct struct_test_component_no_pch_Peer1_B
    {
        struct{ int32_t Value; } First;
        int32_t Second;
    };
    template <> struct abi<test_component_no_pch::Peer1::B>
    {
        using type = struct_test_component_no_pch_Peer1_B;
    };
}
#endif
