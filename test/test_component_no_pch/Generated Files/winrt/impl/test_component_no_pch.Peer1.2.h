// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_no_pch_Peer1_2_H
#define WINRT_test_component_no_pch_Peer1_2_H
#include "winrt/impl/test_component_no_pch.Peer2.1.h"
#include "winrt/impl/test_component_no_pch.Peer1.1.h"
WINRT_EXPORT namespace winrt::test_component_no_pch::Peer1
{
    struct Delegate : Windows::Foundation::IUnknown
    {
        Delegate(std::nullptr_t = nullptr) noexcept {}
        Delegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> Delegate(L lambda);
        template <typename F> Delegate(F* function);
        template <typename O, typename M> Delegate(O* object, M method);
        template <typename O, typename M> Delegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> Delegate(weak_ref<O>&& object, M method);
        auto operator()(test_component_no_pch::Peer2::B const& value) const;
    };
    struct A
    {
        int32_t Value;
    };
    inline bool operator==(A const& left, A const& right) noexcept
    {
        return left.Value == right.Value;
    }
    inline bool operator!=(A const& left, A const& right) noexcept
    {
        return !(left == right);
    }
    struct B
    {
        test_component_no_pch::Peer1::A First;
        int32_t Second;
    };
    inline bool operator==(B const& left, B const& right) noexcept
    {
        return left.First == right.First && left.Second == right.Second;
    }
    inline bool operator!=(B const& left, B const& right) noexcept
    {
        return !(left == right);
    }
}
#endif
