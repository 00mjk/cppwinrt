// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_no_pch_0_H
#define WINRT_test_component_no_pch_0_H
WINRT_EXPORT namespace winrt::test_component_no_pch
{
    struct IClass;
    struct Class;
}
namespace winrt::impl
{
    template <> struct category<test_component_no_pch::IClass>{ using type = interface_category; };
    template <> struct category<test_component_no_pch::Class>{ using type = class_category; };
    template <> inline constexpr auto& name_v<test_component_no_pch::Class>{ L"test_component_no_pch.Class" };
#ifndef WINRT_LEAN_AND_MEAN
    template <> inline constexpr auto& name_v<test_component_no_pch::IClass>{ L"test_component_no_pch.IClass" };
#endif
    template <> inline constexpr guid guid_v<test_component_no_pch::IClass>{ 0xDE430EB7,0xC527,0x5C86,{ 0x89,0x96,0x19,0x6B,0x66,0xC5,0xBB,0x72 } };
    template <> struct default_interface<test_component_no_pch::Class>{ using type = test_component_no_pch::IClass; };
    template <> struct abi<test_component_no_pch::IClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Method() noexcept = 0;
        };
    };
    template <typename D>
    struct consume_test_component_no_pch_IClass
    {
        auto Method() const;
    };
    template <> struct consume<test_component_no_pch::IClass>
    {
        template <typename D> using type = consume_test_component_no_pch_IClass<D>;
    };
}
#endif
