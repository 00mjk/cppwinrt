// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_Delegates_0_H
#define WINRT_test_component_Delegates_0_H
WINRT_EXPORT namespace winrt::test_component::Delegates
{
    struct AgileDelegate;
    struct InDelegate;
    struct OutInt32Delegate;
    struct OutStringArrayDelegate;
    struct OutStringDelegate;
    struct RefStringArrayDelegate;
    struct ReturnInt32Delegate;
    struct ReturnStringArrayDelegate;
    struct ReturnStringDelegate;
}
namespace winrt::impl
{
    template <> struct category<test_component::Delegates::AgileDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::InDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::OutInt32Delegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::OutStringArrayDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::OutStringDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::RefStringArrayDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::ReturnInt32Delegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::ReturnStringArrayDelegate>{ using type = delegate_category; };
    template <> struct category<test_component::Delegates::ReturnStringDelegate>{ using type = delegate_category; };
#ifndef WINRT_LEAN_AND_MEAN
    template <> inline constexpr auto& name_v<test_component::Delegates::AgileDelegate>{ L"test_component.Delegates.AgileDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::InDelegate>{ L"test_component.Delegates.InDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::OutInt32Delegate>{ L"test_component.Delegates.OutInt32Delegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::OutStringArrayDelegate>{ L"test_component.Delegates.OutStringArrayDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::OutStringDelegate>{ L"test_component.Delegates.OutStringDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::RefStringArrayDelegate>{ L"test_component.Delegates.RefStringArrayDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::ReturnInt32Delegate>{ L"test_component.Delegates.ReturnInt32Delegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::ReturnStringArrayDelegate>{ L"test_component.Delegates.ReturnStringArrayDelegate" };
    template <> inline constexpr auto& name_v<test_component::Delegates::ReturnStringDelegate>{ L"test_component.Delegates.ReturnStringDelegate" };
#endif
    template <> inline constexpr guid guid_v<test_component::Delegates::AgileDelegate>{ 0x9C4C3991,0xECA2,0x501A,{ 0xA2,0x28,0x7E,0x8E,0x82,0x2A,0x50,0x49 } };
    template <> inline constexpr guid guid_v<test_component::Delegates::InDelegate>{ 0x419EF389,0xAF4B,0x5676,{ 0xBC,0xEE,0xE0,0xD7,0x9A,0x5C,0xCA,0xDE } };
    template <> inline constexpr guid guid_v<test_component::Delegates::OutInt32Delegate>{ 0x27127B90,0x2C60,0x55FC,{ 0x93,0xCF,0x1C,0xB9,0x0C,0x35,0x6D,0x11 } };
    template <> inline constexpr guid guid_v<test_component::Delegates::OutStringArrayDelegate>{ 0x6FBD01CD,0x9CC0,0x5DC6,{ 0x95,0x0F,0x59,0x4F,0x25,0x19,0x98,0x11 } };
    template <> inline constexpr guid guid_v<test_component::Delegates::OutStringDelegate>{ 0x1F4DFD1A,0x1DF8,0x5BA2,{ 0x8D,0x40,0x2E,0x59,0xF7,0xE3,0x0D,0x95 } };
    template <> inline constexpr guid guid_v<test_component::Delegates::RefStringArrayDelegate>{ 0x38B3B3E6,0xC236,0x5C7B,{ 0xA7,0x75,0xE9,0x28,0x21,0x1D,0x5E,0xBD } };
    template <> inline constexpr guid guid_v<test_component::Delegates::ReturnInt32Delegate>{ 0xBCB57CF7,0x97F9,0x5B38,{ 0x99,0x47,0x39,0xC5,0x14,0x92,0x20,0xF0 } };
    template <> inline constexpr guid guid_v<test_component::Delegates::ReturnStringArrayDelegate>{ 0x7E9BE0DA,0xEA00,0x5EAB,{ 0xAD,0x11,0xE9,0xB9,0xDA,0x1A,0x64,0x9A } };
    template <> inline constexpr guid guid_v<test_component::Delegates::ReturnStringDelegate>{ 0xA09B293D,0xB333,0x5919,{ 0xAF,0x2C,0x36,0x71,0x36,0xD7,0x22,0xF2 } };
    template <> struct abi<test_component::Delegates::AgileDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke() noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::InDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void*) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::OutInt32Delegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::OutStringArrayDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t*, void***) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::OutStringDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void**) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::RefStringArrayDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::ReturnInt32Delegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::ReturnStringArrayDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(uint32_t* __resultSize, void***) noexcept = 0;
        };
    };
    template <> struct abi<test_component::Delegates::ReturnStringDelegate>
    {
        struct __declspec(novtable) type : unknown_abi
        {
            virtual int32_t __stdcall Invoke(void**) noexcept = 0;
        };
    };
}
#endif
