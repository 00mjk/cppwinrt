// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_2_H
#define WINRT_test_component_2_H
#include "winrt/impl/Windows.Foundation.1.h"
#include "winrt/impl/Windows.Foundation.Collections.1.h"
#include "winrt/impl/test_component.1.h"
WINRT_EXPORT namespace winrt::test_component
{
    struct Struct
    {
        hstring First;
        hstring Second;
    };
    inline bool operator==(Struct const& left, Struct const& right) noexcept
    {
        return left.First == right.First && left.Second == right.Second;
    }
    inline bool operator!=(Struct const& left, Struct const& right) noexcept
    {
        return !(left == right);
    }
    struct __declspec(empty_bases) Class : test_component::IClass
    {
        Class(std::nullptr_t) noexcept {}
        Class(void* ptr, take_ownership_from_abi_t) noexcept : test_component::IClass(ptr, take_ownership_from_abi) {}
        Class();
        Class(param::hstring const& name);
        Class(param::iterable<hstring> const& arg, int32_t dummy1);
        Class(param::iterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const& arg, int32_t dummy1, int32_t dummy2);
        Class(param::map<hstring, hstring> const& arg, int32_t dummy1, int32_t dummy2, int32_t dummy3);
        Class(param::map_view<hstring, hstring> const& arg, int32_t dummy1, int32_t dummy2, int32_t dummy3, int32_t dummy4);
        Class(param::vector<hstring> const& arg, int32_t dummy1, int32_t dummy2, int32_t dummy3, int32_t dummy4, int32_t dummy5);
        Class(param::vector_view<hstring> const& arg, int32_t dummy1, int32_t dummy2, int32_t dummy3, int32_t dummy4, int32_t dummy5, int32_t dummy6);
        static void StaticTest();
        static int32_t StaticTestReturn();
        [[nodiscard]] static int32_t StaticProperty();
        static hstring InIterable(param::iterable<hstring> const& value);
        static hstring InIterablePair(param::iterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const& value);
        static Windows::Foundation::IAsyncOperation<hstring> InAsyncIterable(param::async_iterable<hstring> const& value);
        static Windows::Foundation::IAsyncOperation<hstring> InAsyncIterablePair(param::async_iterable<Windows::Foundation::Collections::IKeyValuePair<hstring, hstring>> const& value);
        static hstring InMap(param::map<hstring, hstring> const& value);
        static hstring InMapView(param::map_view<hstring, hstring> const& value);
        static Windows::Foundation::IAsyncOperation<hstring> InAsyncMapView(param::async_map_view<hstring, hstring> const& value);
        static hstring InVector(param::vector<hstring> const& value);
        static hstring InVectorView(param::vector_view<hstring> const& value);
        static Windows::Foundation::IAsyncOperation<hstring> InAsyncVectorView(param::async_vector_view<hstring> const& value);
    };
    struct __declspec(empty_bases) DeferrableEventArgs : test_component::IDeferrableEventArgs
    {
        DeferrableEventArgs(std::nullptr_t) noexcept {}
        DeferrableEventArgs(void* ptr, take_ownership_from_abi_t) noexcept : test_component::IDeferrableEventArgs(ptr, take_ownership_from_abi) {}
    };
    struct __declspec(empty_bases) Simple : test_component::ISimple
    {
        Simple(std::nullptr_t) noexcept {}
        Simple(void* ptr, take_ownership_from_abi_t) noexcept : test_component::ISimple(ptr, take_ownership_from_abi) {}
        Simple();
    };
}
#endif
