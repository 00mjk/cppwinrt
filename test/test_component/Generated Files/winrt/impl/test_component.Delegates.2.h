// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.3.4.5

#ifndef WINRT_test_component_Delegates_2_H
#define WINRT_test_component_Delegates_2_H
#include "winrt/impl/test_component.Delegates.1.h"
WINRT_EXPORT namespace winrt::test_component::Delegates
{
    struct AgileDelegate : Windows::Foundation::IUnknown
    {
        AgileDelegate(std::nullptr_t = nullptr) noexcept {}
        AgileDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> AgileDelegate(L lambda);
        template <typename F> AgileDelegate(F* function);
        template <typename O, typename M> AgileDelegate(O* object, M method);
        template <typename O, typename M> AgileDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> AgileDelegate(weak_ref<O>&& object, M method);
        auto operator()() const;
    };
    struct InDelegate : Windows::Foundation::IUnknown
    {
        InDelegate(std::nullptr_t = nullptr) noexcept {}
        InDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> InDelegate(L lambda);
        template <typename F> InDelegate(F* function);
        template <typename O, typename M> InDelegate(O* object, M method);
        template <typename O, typename M> InDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> InDelegate(weak_ref<O>&& object, M method);
        auto operator()(param::hstring const& value) const;
    };
    struct OutInt32Delegate : Windows::Foundation::IUnknown
    {
        OutInt32Delegate(std::nullptr_t = nullptr) noexcept {}
        OutInt32Delegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> OutInt32Delegate(L lambda);
        template <typename F> OutInt32Delegate(F* function);
        template <typename O, typename M> OutInt32Delegate(O* object, M method);
        template <typename O, typename M> OutInt32Delegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> OutInt32Delegate(weak_ref<O>&& object, M method);
        auto operator()(int32_t& value) const;
    };
    struct OutStringArrayDelegate : Windows::Foundation::IUnknown
    {
        OutStringArrayDelegate(std::nullptr_t = nullptr) noexcept {}
        OutStringArrayDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> OutStringArrayDelegate(L lambda);
        template <typename F> OutStringArrayDelegate(F* function);
        template <typename O, typename M> OutStringArrayDelegate(O* object, M method);
        template <typename O, typename M> OutStringArrayDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> OutStringArrayDelegate(weak_ref<O>&& object, M method);
        auto operator()(com_array<hstring>& value) const;
    };
    struct OutStringDelegate : Windows::Foundation::IUnknown
    {
        OutStringDelegate(std::nullptr_t = nullptr) noexcept {}
        OutStringDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> OutStringDelegate(L lambda);
        template <typename F> OutStringDelegate(F* function);
        template <typename O, typename M> OutStringDelegate(O* object, M method);
        template <typename O, typename M> OutStringDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> OutStringDelegate(weak_ref<O>&& object, M method);
        auto operator()(hstring& value) const;
    };
    struct RefStringArrayDelegate : Windows::Foundation::IUnknown
    {
        RefStringArrayDelegate(std::nullptr_t = nullptr) noexcept {}
        RefStringArrayDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> RefStringArrayDelegate(L lambda);
        template <typename F> RefStringArrayDelegate(F* function);
        template <typename O, typename M> RefStringArrayDelegate(O* object, M method);
        template <typename O, typename M> RefStringArrayDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> RefStringArrayDelegate(weak_ref<O>&& object, M method);
        auto operator()(array_view<hstring> value) const;
    };
    struct ReturnInt32Delegate : Windows::Foundation::IUnknown
    {
        ReturnInt32Delegate(std::nullptr_t = nullptr) noexcept {}
        ReturnInt32Delegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ReturnInt32Delegate(L lambda);
        template <typename F> ReturnInt32Delegate(F* function);
        template <typename O, typename M> ReturnInt32Delegate(O* object, M method);
        template <typename O, typename M> ReturnInt32Delegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> ReturnInt32Delegate(weak_ref<O>&& object, M method);
        auto operator()() const;
    };
    struct ReturnStringArrayDelegate : Windows::Foundation::IUnknown
    {
        ReturnStringArrayDelegate(std::nullptr_t = nullptr) noexcept {}
        ReturnStringArrayDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ReturnStringArrayDelegate(L lambda);
        template <typename F> ReturnStringArrayDelegate(F* function);
        template <typename O, typename M> ReturnStringArrayDelegate(O* object, M method);
        template <typename O, typename M> ReturnStringArrayDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> ReturnStringArrayDelegate(weak_ref<O>&& object, M method);
        auto operator()() const;
    };
    struct ReturnStringDelegate : Windows::Foundation::IUnknown
    {
        ReturnStringDelegate(std::nullptr_t = nullptr) noexcept {}
        ReturnStringDelegate(void* ptr, take_ownership_from_abi_t) noexcept : Windows::Foundation::IUnknown(ptr, take_ownership_from_abi) {}
        template <typename L> ReturnStringDelegate(L lambda);
        template <typename F> ReturnStringDelegate(F* function);
        template <typename O, typename M> ReturnStringDelegate(O* object, M method);
        template <typename O, typename M> ReturnStringDelegate(com_ptr<O>&& object, M method);
        template <typename O, typename M> ReturnStringDelegate(weak_ref<O>&& object, M method);
        auto operator()() const;
    };
}
#endif
